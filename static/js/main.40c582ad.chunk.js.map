{"version":3,"sources":["components/section/Section.module.css","components/feedbackOptions/FeedbackOptions.module.css","components/app/App.module.css","components/statistics/Statistics.module.css","components/feedbackOptions/FeedbackOptions.js","components/statistics/Statistics.js","components/section/Section.js","components/notification/Notification.js","components/app/App.js","index.js"],"names":["module","exports","FeedbackOptions","types","onAddFeedback","options","Object","keys","className","styles","list","map","option","type","key","onClick","Statistics","good","neutral","bad","total","positivePercentage","defaultProps","Section","title","children","section","Notification","message","App","state","addFeedback","setState","prevState","countTotalFeedback","values","reduce","acc","value","countPositiveFeedbackPercentage","totalValue","goodValue","Math","round","this","container","Component","ReactDOM","render","document","getElementById"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,qBCA7DD,EAAOC,QAAU,CAAC,KAAO,gC,gBCAzBD,EAAOC,QAAU,CAAC,UAAY,yB,gBCA9BD,EAAOC,QAAU,CAAC,KAAO,2B,8LC8BVC,EA3BS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAC1BC,EAAUC,OAAOC,KAAKJ,GAE5B,OACE,yBAAKK,UAAWC,IAAOC,MACpBL,EAAQM,KAAI,SAACC,GAAD,OACX,4BACEC,KAAK,SACLC,IAAKF,EACLG,QAAS,kBAAMX,EAAcQ,KAE5BA,Q,gCCXLI,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,yBAAKb,UAAWC,IAAOC,MACrB,oCAAUO,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,OAINL,EAAWM,aAAe,CACxBF,MAAO,EACPC,mBAAoB,GAWPL,Q,gBCVAO,EAbC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,6BAASjB,UAAWC,IAAOiB,SACzB,wBAAIlB,UAAWC,IAAOe,OAAQA,GAC7BC,ICLL,SAASE,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,2BAAIA,GAGbD,EAAaL,aAAe,CAC1BM,QAAS,qBAOID,QC6CAE,E,4MApDbC,MAAQ,CACNb,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPY,YAAc,SAAClB,GACb,EAAKmB,UAAS,SAACC,GACb,OAAO,eACJpB,EAAOoB,EAAUpB,GAAQ,O,EAIhCqB,mBAAqB,kBACnB5B,OAAO6B,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAChEC,gCAAkC,SAACC,EAAYC,GAAb,OAChCC,KAAKC,MAAOF,EAAYD,EAAc,M,uDAE9B,IAAD,EACwBI,KAAKd,MAA5Bb,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQwB,KAAKV,qBACbb,EAAqBuB,KAAKL,gCAC9BnB,EACAH,GAEF,OACE,yBAAKT,UAAWC,IAAOoC,WACrB,yDACA,kBAAC,EAAD,CAASrB,MAAM,yBACb,kBAAC,EAAD,CACErB,MAAOyC,KAAKd,MACZ1B,cAAewC,KAAKb,eAGxB,kBAAC,EAAD,CAASP,MAAM,cACZJ,EAAQ,EACP,kBAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,kBAAC,EAAD,CAAcG,MAAM,4B,GA7CdsB,aCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.40c582ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1WU_O\",\"title\":\"Section_title__2K4d1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__snFQ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1wBqQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__1ZYXT\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./FeedbackOptions.module.css\";\r\n\r\nconst FeedbackOptions = ({ types, onAddFeedback }) => {\r\n  const options = Object.keys(types);\r\n\r\n  return (\r\n    <div className={styles.list}>\r\n      {options.map((option) => (\r\n        <button\r\n          type=\"button\"\r\n          key={option}\r\n          onClick={() => onAddFeedback(option)}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  types: PropTypes.shape({\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  onAddFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div className={styles.list}>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </div>\r\n  );\r\n};\r\nStatistics.defaultProps = {\r\n  total: 0,\r\n  positivePercentage: 0,\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./Section.module.css\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section className={styles.section}>\r\n    <h2 className={styles.title}>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.defaultProps = {\r\n  message: \"No feedback given\",\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\nimport FeedbackOptions from \"../feedbackOptions\";\nimport styles from \"./App.module.css\";\nimport Statistics from \"../statistics\";\nimport Section from \"../section\";\nimport Notification from \"../notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addFeedback = (type) => {\n    this.setState((prevState) => {\n      return {\n        [type]: prevState[type] + 1,\n      };\n    });\n  };\n  countTotalFeedback = () =>\n    Object.values(this.state).reduce((acc, value) => acc + value, 0);\n  countPositiveFeedbackPercentage = (totalValue, goodValue) =>\n    Math.round((goodValue / totalValue) * 100);\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage(\n      total,\n      good\n    );\n    return (\n      <div className={styles.container}>\n        <h1>goit-react-hw-02-feedback</h1>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            types={this.state}\n            onAddFeedback={this.addFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {total > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification title=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}